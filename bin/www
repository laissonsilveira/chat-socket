#!/usr/bin/env node
const LOGGER = require('../logger');
const app = require('../app');
const http = require('http');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const { Server } = require('socket.io');
const io = new Server(server);
//Whenever someone connects this gets executed
io.on('connection', function (socket) {
    LOGGER.info('A user connected');
    //Whenever someone disconnects this piece of code executed
    socket.on('disconnect', function () {
        LOGGER.info('A user disconnected');
    });
    socket.on('chat message', (msg) => {
        LOGGER.info('message: ' + msg);
        io.emit('chat message', msg);
    });
});

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            LOGGER.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            LOGGER.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    LOGGER.info('Listening on ' + bind);
}